#!/bin/bash

version_file=".version"

warn () {
  echo "$@" 1>&2
}

require_cwd_in_work_tree () {
  if ! git rev-parse 2>/dev/null
  then
    warn "$PWD is not under git revision control"
    exit 1
  fi
}

usage () {
  echo "git vers (show|bump (major|minor|rev)|generate [-i])"
  echo "  git vers"
  echo "  git vers show         display version number"
  echo "  git vers bump major   increment major number and reset minor and rev numbers"
  echo "  git vers bump minor   increment minor number and reset rev number"
  echo "  git vers bump rev     increment rev number"
  echo "  git vers set A B C    set the version to a.b.c"
  exit 1
}

git_path () {
  local fptr fpta
  if git rev-parse --git-dir &> /dev/null; then
    fptr="$(git rev-parse --git-dir)"
    if [[ $fptr == '.git' ]]; then
      fpta=$(readlink -f $PWD)
    else
      fpta="${fptr%'/.git'}"
    fi
    echo $fpta
    return 0
  else
    echo ""
    return 1
  fi
}

write_vfile () {
  echo "major=$1" > "$version_file"
  echo "minor=$2" >> "$version_file"
  echo "rev=$3" >> "$version_file"
}

show_vers () {
    fmt="%d.%d.%d"
    if [[ -t 1 ]]; then
      fmt="$fmt\n"
    fi
    printf "$fmt" "$major" "$minor" "$rev"
}

while getopts ":h" opt; do
  case "$opt" in
    *) usage;;
  esac
done
shift $((OPTIND - 1))

# other sanity checks
require_cwd_in_work_tree

cd "$(git_path)"

if [[ $1 == generate ]] || [[ $1 == init ]]; then
  if [[ -e $version_file ]]; then
    echo "$version_file already exists!"
    exit 1
  fi
  write_vfile 0 0 0
  shift
  if [[ $1 == "-i" ]]; then
    echo "$version_file" >> .gitignore
    echo "Version file added to .gitignore"
  fi
  exit
fi

if ! [[ -f "$version_file" ]]; then
  warn "Version file $version_file missing!"
  exit 1
fi
source "$version_file"

if [[ -z $1 ]] || [[ $1 == "show" ]]; then
  show_vers
elif [[ $1 == bump ]]; then
  printf "%s.%s.%s -> " "$major" "$minor" "$rev"
  case $2 in
    major)
      (( major++ ))
      minor=0
      rev=0
      ;;

    minor)
      (( minor++ ))
      rev=0
      ;;

    rev)
      (( rev++ ))
      ;;

    *)
      usage
      ;;
  esac
  write_vfile "$major" "$minor" "$rev"
  printf "%s.%s.%s\n" "$major" "$minor" "$rev"
elif [[ $1 == "set" ]] && [[ -n $2 ]] && [[ -n $3 ]] && [[ -n $4 ]]; then
  write_vfile "$2" "$3" "$4"
  printf "%s.%s.%s\n" "$2" "$3" "$4"
else
  usage
fi
